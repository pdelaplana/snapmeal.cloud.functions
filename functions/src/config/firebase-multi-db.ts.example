import * as fs from 'node:fs';
import * as admin from 'firebase-admin';

// Get environment-specific database ID
const getDatabaseId = (): string => {
  const environment = process.env.ENVIRONMENT || 'production';

  switch (environment) {
    case 'development':
      return 'development';
    case 'staging':
      return 'staging';
    case 'production':
    default:
      return '(default)'; // Default Firestore database
  }
};

// Initialize Firebase Admin SDK
try {
  if (fs.existsSync('./firebase-service-account.json')) {
    admin.initializeApp({
      credential: admin.credential.cert('./firebase-service-account.json'),
    });
  } else {
    admin.initializeApp();
  }

  const databaseId = getDatabaseId();
  console.log(`Firebase Admin SDK initialized successfully with database: ${databaseId}`);
} catch (error) {
  console.error('Error initializing Firebase Admin SDK:', error);
  throw error;
}

// For multiple databases in the same project, you need to:
// 1. Create additional databases in Firebase Console
// 2. Use the correct API to reference them

const databaseId = getDatabaseId();

// Method 1: Using firebase-admin v11+ with multiple databases
export const db = databaseId === '(default)'
  ? admin.firestore()
  : admin.app().firestore(databaseId);

// Method 2: Alternative approach (if above doesn't work)
// export const db = admin.firestore();
// Then configure collections with database-specific prefixes

// Configure Firestore settings
db.settings({
  ignoreUndefinedProperties: true,
});

export const currentDatabaseId = databaseId;
